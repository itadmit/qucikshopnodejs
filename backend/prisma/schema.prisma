generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                @id @default(autoincrement())
  email              String             @unique
  passwordHash       String             @map("password_hash")
  firstName          String             @map("first_name")
  lastName           String             @map("last_name")
  phone              String?
  planType           PlanType           @default(BASIC) @map("plan_type")
  subscriptionStatus SubscriptionStatus @default(TRIAL) @map("subscription_status")
  trialEndsAt        DateTime?          @map("trial_ends_at")
  subscriptionEndsAt DateTime?          @map("subscription_ends_at")
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")
  lastLoginAt        DateTime?          @map("last_login_at")
  hasCompletedOnboarding Boolean        @default(false) @map("has_completed_onboarding")
  billingHistory     BillingHistory[]
  notifications      Notification[]
  invitedStoreUsers  StoreUser[]        @relation("StoreInviter")
  storeUsers         StoreUser[]
  stores             Store[]

  @@map("users")
}

model Store {
  id                 Int                     @id @default(autoincrement())
  userId             Int                     @map("user_id")
  name               String
  slug               String                  @unique
  domain             String?                 @unique
  logoUrl            String?                 @map("logo_url")
  faviconUrl         String?                 @map("favicon_url")
  description        String?
  templateName       String                  @default("jupiter") @map("template_name")
  settings           Json?
  isActive           Boolean                 @default(true) @map("is_active")
  planType           StorePlanType           @default(BASIC) @map("plan_type")
  subscriptionStatus StoreSubscriptionStatus @default(TRIAL) @map("subscription_status")
  trialEndsAt        DateTime?               @map("trial_ends_at")
  subscriptionEndsAt DateTime?               @map("subscription_ends_at")
  monthlyRevenue     Float                   @default(0) @map("monthly_revenue")
  transactionFeeRate Float                   @default(0.005) @map("transaction_fee_rate")
  
  // Pixel and tracking settings
  facebookPixelId    String?                 @map("facebook_pixel_id")
  facebookAccessToken String?                @map("facebook_access_token")
  googleTagManagerId String?                 @map("google_tag_manager_id")
  googleAnalyticsId  String?                 @map("google_analytics_id")
  pixelSettings      Json?                   @map("pixel_settings") // Additional settings
  
  createdAt          DateTime                @default(now()) @map("created_at")
  updatedAt          DateTime                @updatedAt @map("updated_at")
  analyticsEvents    AnalyticsEvent[]
  automaticDiscounts AutomaticDiscount[]
  cartSessions       CartSession[]
  categories         Category[]
  coupons            Coupon[]
  customFields       CustomField[]
  customers          Customer[]
  influencers        Influencer[]
  media              Media[]
  orders             Order[]
  pages              Page[]
  products           Product[]
  storeUsers         StoreUser[]
  partnerStores      PartnerStore[]
  user               User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Analytics relations
  activeSessions     ActiveSession[]
  dailyAnalytics     DailyAnalytics[]
  hourlyAnalytics    HourlyAnalytics[]
  performanceMetrics PerformanceMetric[]

  @@map("stores")
}

model StoreUser {
  id          Int       @id @default(autoincrement())
  storeId     Int       @map("store_id")
  userId      Int       @map("user_id")
  role        StoreRole @default(STAFF)
  permissions Json?
  isActive    Boolean   @default(true) @map("is_active")
  invitedBy   Int?      @map("invited_by")
  invitedAt   DateTime  @default(now()) @map("invited_at")
  acceptedAt  DateTime? @map("accepted_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  inviter     User?     @relation("StoreInviter", fields: [invitedBy], references: [id])
  store       Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([storeId, userId])
  @@map("store_users")
}

model Category {
  id             Int        @id @default(autoincrement())
  storeId        Int        @map("store_id")
  parentId       Int?       @map("parent_id")
  name           String
  slug           String
  description    String?
  imageUrl       String?    @map("image_url")
  sortOrder      Int        @default(0) @map("sort_order")
  isActive       Boolean    @default(true) @map("is_active")
  seoTitle       String?    @map("seo_title")
  seoDescription String?    @map("seo_description")
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")
  parent         Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children       Category[] @relation("CategoryHierarchy")
  store          Store      @relation(fields: [storeId], references: [id], onDelete: Cascade)
  products       Product[]

  @@unique([storeId, slug])
  @@map("categories")
}

model Product {
  id                Int              @id @default(autoincrement())
  storeId           Int              @map("store_id")
  categoryId        Int?             @map("category_id")
  name              String
  slug              String
  description       String?
  shortDescription  String?          @map("short_description")
  sku               String?
  type              ProductType      @default(SIMPLE)
  status            ProductStatus    @default(DRAFT)
  price             Float?
  comparePrice      Float?           @map("compare_price")
  costPrice         Float?           @map("cost_price")
  trackInventory    Boolean          @default(true) @map("track_inventory")
  inventoryQuantity Int              @default(0) @map("inventory_quantity")
  allowBackorder    Boolean          @default(false) @map("allow_backorder")
  weight            Float?
  dimensions        Json?
  requiresShipping  Boolean          @default(true) @map("requires_shipping")
  isDigital         Boolean          @default(false) @map("is_digital")
  seoTitle          String?          @map("seo_title")
  seoDescription    String?          @map("seo_description")
  tags              Json?
  customFields      Json?            @map("custom_fields")
  sortOrder         Int              @default(0) @map("sort_order")
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")
  orderItems        OrderItem[]
  media             ProductMedia[]
  options           ProductOption[]
  variants          ProductVariant[]
  category          Category?        @relation(fields: [categoryId], references: [id])
  store             Store            @relation(fields: [storeId], references: [id], onDelete: Cascade)
  
  // Bundle relationships
  bundleItems       BundleItem[]     @relation("BundleProduct")
  bundleParents     BundleItem[]     @relation("BundleItemProduct")

  @@unique([storeId, slug])
  @@map("products")
}

model ProductOption {
  id          Int                  @id @default(autoincrement())
  productId   Int                  @map("product_id")
  name        String
  type        ProductOptionType    @default(TEXT)
  displayType ProductOptionDisplay @default(DROPDOWN) @map("display_type")
  position    Int                  @default(0)
  createdAt   DateTime             @default(now()) @map("created_at")
  values      ProductOptionValue[]
  variantOptionValues ProductVariantOptionValue[]
  product     Product              @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, name])
  @@map("product_options")
}

model ProductOptionValue {
  id           Int            @id @default(autoincrement())
  optionId     Int            @map("option_id")
  value        String
  colorCode    String?        @map("color_code")
  imageUrl     String?        @map("image_url")
  sortOrder    Int            @default(0) @map("sort_order")
  createdAt    DateTime       @default(now()) @map("created_at")
  productMedia ProductMedia[]
  variantOptionValues ProductVariantOptionValue[]
  option       ProductOption  @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@map("product_option_values")
}

model CustomField {
  id           Int             @id @default(autoincrement())
  storeId      Int             @map("store_id")
  name         String
  label        String
  type         CustomFieldType @default(TEXT)
  isRequired   Boolean         @default(false) @map("is_required")
  placeholder  String?
  helpText     String?         @map("help_text")
  defaultValue String?         @map("default_value")
  options      Json?
  validation   Json?
  sortOrder    Int             @default(0) @map("sort_order")
  isActive     Boolean         @default(true) @map("is_active")
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime        @updatedAt @map("updated_at")
  store        Store           @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([storeId, name])
  @@map("custom_fields")
}

model ProductVariant {
  id                Int            @id @default(autoincrement())
  productId         Int            @map("product_id")
  sku               String?
  price             Float?
  comparePrice      Float?         @map("compare_price")
  costPrice         Float?         @map("cost_price")
  inventoryQuantity Int            @default(0) @map("inventory_quantity")
  weight            Float?
  isActive          Boolean                   @default(true) @map("is_active")
  createdAt         DateTime                  @default(now()) @map("created_at")
  updatedAt         DateTime                  @updatedAt @map("updated_at")
  orderItems        OrderItem[]
  media             ProductMedia[]
  optionValues      ProductVariantOptionValue[]
  bundleItems       BundleItem[]
  product           Product                   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model ProductVariantOptionValue {
  id              Int                @id @default(autoincrement())
  variantId       Int                @map("variant_id")
  optionId        Int                @map("option_id")
  optionValueId   Int                @map("option_value_id")
  value           String
  createdAt       DateTime           @default(now()) @map("created_at")
  variant         ProductVariant     @relation(fields: [variantId], references: [id], onDelete: Cascade)
  option          ProductOption      @relation(fields: [optionId], references: [id], onDelete: Cascade)
  optionValue     ProductOptionValue @relation(fields: [optionValueId], references: [id], onDelete: Cascade)

  @@unique([variantId, optionId])
  @@map("product_variant_option_values")
}

model BundleItem {
  id              Int             @id @default(autoincrement())
  bundleId        Int             @map("bundle_id")
  productId       Int             @map("product_id")
  variantId       Int?            @map("variant_id")
  quantity        Int             @default(1)
  sortOrder       Int             @default(0) @map("sort_order")
  isOptional      Boolean         @default(false) @map("is_optional")
  discountType    BundleDiscountType? @map("discount_type")
  discountValue   Float?          @map("discount_value")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  
  bundle          Product         @relation("BundleProduct", fields: [bundleId], references: [id], onDelete: Cascade)
  product         Product         @relation("BundleItemProduct", fields: [productId], references: [id], onDelete: Cascade)
  variant         ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([bundleId, productId, variantId])
  @@map("bundle_items")
}

model Media {
  id               Int            @id @default(autoincrement())
  storeId          Int            @map("store_id")
  filename         String
  originalFilename String         @map("original_filename")
  mimeType         String         @map("mime_type")
  fileSize         Int            @map("file_size")
  width            Int?
  height           Int?
  s3Key            String         @map("s3_key")
  s3Url            String         @map("s3_url")
  altText          String?        @map("alt_text")
  createdAt        DateTime       @default(now()) @map("created_at")
  store            Store          @relation(fields: [storeId], references: [id], onDelete: Cascade)
  productMedia     ProductMedia[]

  @@map("media")
}

model ProductMedia {
  id                 Int                 @id @default(autoincrement())
  productId          Int                 @map("product_id")
  mediaId            Int                 @map("media_id")
  variantId          Int?                @map("variant_id")
  type               MediaType           @default(IMAGE)
  altText            String?             @map("alt_text")
  sortOrder          Int                 @default(0) @map("sort_order")
  isPrimary          Boolean             @default(false) @map("is_primary")
  colorOptionValueId Int?                @map("color_option_value_id")
  createdAt          DateTime            @default(now()) @map("created_at")
  colorOptionValue   ProductOptionValue? @relation(fields: [colorOptionValueId], references: [id])
  media              Media               @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  product            Product             @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant            ProductVariant?     @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@map("product_media")
}



model Customer {
  id               Int               @id @default(autoincrement())
  storeId          Int               @map("store_id")
  email            String
  passwordHash     String?           @map("password_hash")
  firstName        String?           @map("first_name")
  lastName         String?           @map("last_name")
  phone            String?
  dateOfBirth      DateTime?         @map("date_of_birth")
  gender           String?
  totalSpent       Float             @default(0) @map("total_spent")
  ordersCount      Int               @default(0) @map("orders_count")
  tags             Json?
  notes            String?
  acceptsMarketing Boolean           @default(false) @map("accepts_marketing")
  isActive         Boolean           @default(true) @map("is_active")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  lastLoginAt      DateTime?         @map("last_login_at")
  analyticsEvents  AnalyticsEvent[]
  cartSessions     CartSession[]
  addresses        CustomerAddress[]
  store            Store             @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orders           Order[]
  activeSessions   ActiveSession[]
  couponUsages     CouponUsage[]

  @@unique([storeId, email])
  @@map("customers")
}

model CustomerAddress {
  id           Int         @id @default(autoincrement())
  customerId   Int         @map("customer_id")
  type         AddressType
  firstName    String      @map("first_name")
  lastName     String      @map("last_name")
  company      String?
  addressLine1 String      @map("address_line_1")
  addressLine2 String?     @map("address_line_2")
  city         String
  state        String?
  postalCode   String      @map("postal_code")
  country      String
  phone        String?
  isDefault    Boolean     @default(false) @map("is_default")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  customer     Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("customer_addresses")
}

model Order {
  id                Int               @id @default(autoincrement())
  storeId           Int               @map("store_id")
  customerId        Int?              @map("customer_id")
  orderNumber       String            @unique @map("order_number")
  status            OrderStatus       @default(PENDING)
  paymentStatus     PaymentStatus     @default(PENDING) @map("payment_status")
  fulfillmentStatus FulfillmentStatus @default(UNFULFILLED) @map("fulfillment_status")
  subtotal          Float
  taxAmount         Float             @default(0) @map("tax_amount")
  shippingAmount    Float             @default(0) @map("shipping_amount")
  discountAmount    Float             @default(0) @map("discount_amount")
  totalAmount       Float             @map("total_amount")
  currency          String            @default("ILS")
  customerEmail     String?           @map("customer_email")
  customerPhone     String?           @map("customer_phone")
  billingAddress    Json?             @map("billing_address")
  shippingAddress   Json?             @map("shipping_address")
  notes             String?
  couponCodes       Json?             @map("coupon_codes")
  appliedDiscounts  Json?             @map("applied_discounts")
  paymentMethod     String?           @map("payment_method")
  paymentReference  String?           @map("payment_reference")
  trackingNumber    String?           @map("tracking_number")
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  items             OrderItem[]
  customer          Customer?         @relation(fields: [customerId], references: [id])
  store             Store             @relation(fields: [storeId], references: [id], onDelete: Cascade)
  couponUsages      CouponUsage[]

  @@map("orders")
}

model OrderItem {
  id             Int             @id @default(autoincrement())
  orderId        Int             @map("order_id")
  productId      Int             @map("product_id")
  variantId      Int?            @map("variant_id")
  quantity       Int
  price          Float
  total          Float
  productName    String          @map("product_name")
  productSku     String?         @map("product_sku")
  variantOptions Json?           @map("variant_options")
  createdAt      DateTime        @default(now()) @map("created_at")
  order          Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product        Product         @relation(fields: [productId], references: [id])
  variant        ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Restrict)

  @@map("order_items")
}

model CartSession {
  id         String    @id
  storeId    Int       @map("store_id")
  customerId Int?      @map("customer_id")
  items      Json
  expiresAt  DateTime  @map("expires_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  store      Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("cart_sessions")
}

model Page {
  id               Int      @id @default(autoincrement())
  storeId          Int      @map("store_id")
  type             PageType
  title            String
  slug             String
  content          Json?
  seoTitle         String?  @map("seo_title")
  seoDescription   String?  @map("seo_description")
  isPublished      Boolean  @default(false) @map("is_published")
  templateOverride String?  @map("template_override")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  store            Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([storeId, slug])
  @@map("pages")
}

model AnalyticsEvent {
  id         BigInt    @id @default(autoincrement())
  storeId    Int       @map("store_id")
  eventType  String    @map("event_type")
  eventData  Json?     @map("event_data")
  sessionId  String?   @map("session_id")
  customerId Int?      @map("customer_id")
  ipAddress  String?   @map("ip_address")
  userAgent  String?   @map("user_agent")
  referrer   String?
  createdAt  DateTime  @default(now()) @map("created_at")
  customer   Customer? @relation(fields: [customerId], references: [id])
  store      Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("analytics_events")
}

model BillingHistory {
  id                 Int           @id @default(autoincrement())
  userId             Int           @map("user_id")
  amount             Float
  currency           String        @default("ILS")
  description        String
  paymentMethod      String?       @map("payment_method")
  paymentReference   String?       @map("payment_reference")
  status             PaymentStatus @default(PENDING)
  billingPeriodStart DateTime?     @map("billing_period_start")
  billingPeriodEnd   DateTime?     @map("billing_period_end")
  createdAt          DateTime      @default(now()) @map("created_at")
  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("billing_history")
}

model Notification {
  id        Int                  @id @default(autoincrement())
  userId    Int                  @map("user_id")
  type      NotificationType
  title     String
  message   String
  actionUrl String?              @map("action_url")
  isRead    Boolean              @default(false) @map("is_read")
  priority  NotificationPriority @default(NORMAL)
  metadata  Json?
  createdAt DateTime             @default(now()) @map("created_at")
  readAt    DateTime?            @map("read_at")
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum PlanType {
  BASIC
  PRO
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  INACTIVE
  CANCELLED
}

enum ProductType {
  SIMPLE
  VARIABLE
  BUNDLE
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

enum ProductOptionType {
  TEXT
  COLOR
  IMAGE
  BUTTON
}

enum ProductOptionDisplay {
  DROPDOWN
  RADIO
  SWATCH
}

enum MediaType {
  IMAGE
  VIDEO
}

enum CouponAppliesTo {
  ALL
  SPECIFIC_PRODUCTS
  SPECIFIC_CATEGORIES
}

enum AutomaticDiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  BOGO
  BUY_X_GET_Y
}

enum AddressType {
  BILLING
  SHIPPING
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum FulfillmentStatus {
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
}

enum PageType {
  HOME
  CONTENT
  CATEGORY
  PRODUCT
}

enum NotificationType {
  ORDER_RECEIVED
  ORDER_SHIPPED
  ORDER_DELIVERED
  ORDER_CANCELLED
  PAYMENT_RECEIVED
  PAYMENT_FAILED
  LOW_STOCK
  OUT_OF_STOCK
  TRIAL_ENDING
  SUBSCRIPTION_EXPIRED
  NEW_CUSTOMER
  SYSTEM_UPDATE
  SECURITY_ALERT
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum StorePlanType {
  BASIC
  NO_TRANSACTION
}

enum StoreSubscriptionStatus {
  TRIAL
  ACTIVE
  INACTIVE
  CANCELLED
  SUSPENDED
}

enum StoreRole {
  OWNER
  ADMIN
  MANAGER
  STAFF
  VIEWER
}

enum CustomFieldType {
  TEXT
  TEXTAREA
  NUMBER
  EMAIL
  URL
  PHONE
  DATE
  CHECKBOX
  DROPDOWN
  RADIO
  FILE
}

enum BundleDiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

// Real-time analytics models
model ActiveSession {
  id           String    @id
  storeId      Int       @map("store_id")
  customerId   Int?      @map("customer_id")
  userAgent    String?   @map("user_agent")
  ipAddress    String?   @map("ip_address")
  lastActivity DateTime  @default(now()) @map("last_activity")
  createdAt    DateTime  @default(now()) @map("created_at")
  expiresAt    DateTime  @map("expires_at")
  
  store        Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  customer     Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  @@map("active_sessions")
}

model DailyAnalytics {
  id                  Int      @id @default(autoincrement())
  storeId             Int      @map("store_id")
  date                DateTime @db.Date
  uniqueVisitors      Int      @default(0) @map("unique_visitors")
  pageViews           Int      @default(0) @map("page_views")
  sessions            Int      @default(0)
  orders              Int      @default(0)
  revenue             Float    @default(0)
  conversionRate      Float    @default(0) @map("conversion_rate")
  avgSessionDuration  Int      @default(0) @map("avg_session_duration") // in seconds
  bounceRate          Float    @default(0) @map("bounce_rate")
  topPages            Json     @default("[]") @map("top_pages")
  topProducts         Json     @default("[]") @map("top_products")
  trafficSources      Json     @default("{}") @map("traffic_sources")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")
  
  store               Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([storeId, date])
  @@map("daily_analytics")
}

model HourlyAnalytics {
  id           Int      @id @default(autoincrement())
  storeId      Int      @map("store_id")
  date         DateTime
  hour         Int      // 0-23
  activeUsers  Int      @default(0) @map("active_users")
  pageViews    Int      @default(0) @map("page_views")
  newSessions  Int      @default(0) @map("new_sessions")
  orders       Int      @default(0)
  revenue      Float    @default(0)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  store        Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([storeId, date, hour])
  @@map("hourly_analytics")
}

model PerformanceMetric {
  id         Int      @id @default(autoincrement())
  storeId    Int      @map("store_id")
  metricType String   @map("metric_type") // 'page_load', 'api_response', etc.
  value      Float
  metadata   Json?
  createdAt  DateTime @default(now()) @map("created_at")
  
  store      Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("performance_metrics")
}

// Enums for discount and coupon system
enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
  BUY_X_GET_Y
  TIERED
  BUNDLE
}

enum DiscountStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  USED_UP
}

enum CouponType {
  SINGLE_USE
  MULTIPLE_USE
  UNLIMITED
}

enum InfluencerStatus {
  ACTIVE
  INACTIVE
  PENDING
}

// Influencer model
model Influencer {
  id                Int               @id @default(autoincrement())
  storeId           Int               @map("store_id")
  name              String
  email             String
  password          String            // Hashed password for influencer login
  phone             String?
  code              String            @unique // Unique influencer code (auto-generated)
  commissionRate    Float             @default(0.1) @map("commission_rate") // 10% default
  status            InfluencerStatus  @default(PENDING)
  totalEarnings     Float             @default(0) @map("total_earnings")
  totalOrders       Int               @default(0) @map("total_orders")
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  
  // Relations
  store             Store             @relation(fields: [storeId], references: [id], onDelete: Cascade)
  coupons           Coupon[]
  automaticDiscounts AutomaticDiscount[]
  influencerStats   InfluencerStats[]

  @@unique([storeId, email])
  @@unique([storeId, code])
  @@map("influencers")
}

// Coupon model
model Coupon {
  id                Int           @id @default(autoincrement())
  storeId           Int           @map("store_id")
  influencerId      Int?          @map("influencer_id")
  code              String        @unique
  name              String
  description       String?
  type              CouponType    @default(MULTIPLE_USE)
  discountType      DiscountType
  discountValue     Float         @map("discount_value") // Percentage or fixed amount
  minimumAmount     Float?        @map("minimum_amount")
  maximumDiscount   Float?        @map("maximum_discount") // For percentage discounts
  usageLimit        Int?          @map("usage_limit")
  usageCount        Int           @default(0) @map("usage_count")
  customerLimit     Int?          @map("customer_limit") // Per customer limit
  startsAt          DateTime?     @map("starts_at")
  expiresAt         DateTime?     @map("expires_at")
  status            DiscountStatus @default(ACTIVE)
  
  // Conditions
  applicableProducts Json?        @map("applicable_products") // Product IDs
  applicableCategories Json?      @map("applicable_categories") // Category IDs
  excludedProducts  Json?         @map("excluded_products")
  excludedCategories Json?        @map("excluded_categories")
  customerSegments  Json?         @map("customer_segments") // Customer criteria
  
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  
  // Relations
  store             Store         @relation(fields: [storeId], references: [id], onDelete: Cascade)
  influencer        Influencer?   @relation(fields: [influencerId], references: [id], onDelete: SetNull)
  usages            CouponUsage[]

  @@unique([storeId, code])
  @@map("coupons")
}

// Automatic discount model
model AutomaticDiscount {
  id                Int           @id @default(autoincrement())
  storeId           Int           @map("store_id")
  influencerId      Int?          @map("influencer_id")
  name              String
  description       String?
  discountType      DiscountType
  discountValue     Float         @map("discount_value")
  minimumAmount     Float?        @map("minimum_amount")
  maximumDiscount   Float?        @map("maximum_discount")
  priority          Int           @default(0) // Higher number = higher priority
  stackable         Boolean       @default(false) // Can combine with other discounts
  startsAt          DateTime?     @map("starts_at")
  expiresAt         DateTime?     @map("expires_at")
  status            DiscountStatus @default(ACTIVE)
  
  // Conditions (same as coupon)
  applicableProducts Json?        @map("applicable_products")
  applicableCategories Json?      @map("applicable_categories")
  excludedProducts  Json?         @map("excluded_products")
  excludedCategories Json?        @map("excluded_categories")
  customerSegments  Json?         @map("customer_segments")
  
  // BOGO and tiered discount settings
  buyQuantity       Int?          @map("buy_quantity") // For BOGO: buy X
  getQuantity       Int?          @map("get_quantity") // For BOGO: get Y
  tieredRules       Json?         @map("tiered_rules") // For tiered discounts
  
  // Advanced BOGO settings
  buyProducts       Json?         @map("buy_products") // Specific products to buy
  buyCategories     Json?         @map("buy_categories") // Categories to buy from
  getProducts       Json?         @map("get_products") // Specific products to get discount on
  getCategories     Json?         @map("get_categories") // Categories to get discount on
  getDiscountType   String?       @map("get_discount_type") // 'percentage', 'fixed', 'fixed_price', 'free'
  getDiscountValue  Float?        @map("get_discount_value") // Value based on getDiscountType
  
  usageCount        Int           @default(0) @map("usage_count")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  
  // Relations
  store             Store         @relation(fields: [storeId], references: [id], onDelete: Cascade)
  influencer        Influencer?   @relation(fields: [influencerId], references: [id], onDelete: SetNull)

  @@map("automatic_discounts")
}

// Coupon usage tracking
model CouponUsage {
  id          Int      @id @default(autoincrement())
  couponId    Int      @map("coupon_id")
  orderId     Int?     @map("order_id")
  customerId  Int?     @map("customer_id")
  sessionId   String?  @map("session_id")
  discountAmount Float @map("discount_amount")
  orderTotal  Float    @map("order_total")
  usedAt      DateTime @default(now()) @map("used_at")
  
  // Relations
  coupon      Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade)
  order       Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull)
  customer    Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  @@map("coupon_usages")
}

// Influencer statistics
model InfluencerStats {
  id            Int        @id @default(autoincrement())
  influencerId  Int        @map("influencer_id")
  date          DateTime   @db.Date
  orders        Int        @default(0)
  revenue       Float      @default(0)
  commission    Float      @default(0)
  couponUses    Int        @default(0) @map("coupon_uses")
  newCustomers  Int        @default(0) @map("new_customers")
  
  // Relations
  influencer    Influencer @relation(fields: [influencerId], references: [id], onDelete: Cascade)

  @@unique([influencerId, date])
  @@map("influencer_stats")
}

// Partner System Models
model Partner {
  id              Int                @id @default(autoincrement())
  email           String             @unique
  password        String
  firstName       String             @map("first_name")
  lastName        String             @map("last_name")
  company         String?
  phone           String?
  referralCode    String             @unique @map("referral_code")
  tier            PartnerTier        @default(BRONZE)
  isActive        Boolean            @default(true) @map("is_active")
  totalStores     Int                @default(0) @map("total_stores")
  activeStores    Int                @default(0) @map("active_stores")
  lastLoginAt     DateTime?          @map("last_login_at")
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @updatedAt @map("updated_at")
  
  // Relations
  stores          PartnerStore[]
  commissions     PartnerCommission[]
  payoutRequests  PartnerPayoutRequest[]
  activities      PartnerActivity[]
  
  @@map("partners")
}

model PartnerStore {
  id              Int                @id @default(autoincrement())
  partnerId       Int                @map("partner_id")
  storeId         Int                @map("store_id")
  status          PartnerStoreStatus @default(DEVELOPMENT)
  referralCode    String?            @map("referral_code")
  createdAt       DateTime           @default(now()) @map("created_at")
  transferredAt   DateTime?          @map("transferred_at")
  activatedAt     DateTime?          @map("activated_at")
  cancelledAt     DateTime?          @map("cancelled_at")
  transferEmail   String?            @map("transfer_email")
  
  // Relations
  partner         Partner            @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  store           Store              @relation(fields: [storeId], references: [id], onDelete: Cascade)
  commissions     PartnerCommission[]
  
  @@unique([partnerId, storeId])
  @@map("partner_stores")
}

model PartnerCommission {
  id              Int                @id @default(autoincrement())
  partnerId       Int                @map("partner_id")
  partnerStoreId  Int                @map("partner_store_id")
  amount          Decimal            @db.Decimal(10, 2)
  status          CommissionStatus   @default(PENDING)
  earnedAt        DateTime           @default(now()) @map("earned_at")
  approvedAt      DateTime?          @map("approved_at")
  paidAt          DateTime?          @map("paid_at")
  payoutRequestId Int?               @map("payout_request_id")
  
  // Relations
  partner         Partner            @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  partnerStore    PartnerStore       @relation(fields: [partnerStoreId], references: [id], onDelete: Cascade)
  payoutRequest   PartnerPayoutRequest? @relation(fields: [payoutRequestId], references: [id])
  
  @@map("partner_commissions")
}

model PartnerPayoutRequest {
  id              Int                @id @default(autoincrement())
  partnerId       Int                @map("partner_id")
  amount          Decimal            @db.Decimal(10, 2)
  status          PayoutStatus       @default(PENDING)
  bankDetails     Json?              @map("bank_details")
  requestedAt     DateTime           @default(now()) @map("requested_at")
  processedAt     DateTime?          @map("processed_at")
  notes           String?
  transactionId   String?            @map("transaction_id")
  
  // Relations
  partner         Partner            @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  commissions     PartnerCommission[]
  
  @@map("partner_payout_requests")
}

model PartnerActivity {
  id              Int                @id @default(autoincrement())
  partnerId       Int                @map("partner_id")
  type            PartnerActivityType
  metadata        Json?
  ipAddress       String?            @map("ip_address")
  userAgent       String?            @map("user_agent")
  createdAt       DateTime           @default(now()) @map("created_at")
  
  // Relations
  partner         Partner            @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  
  @@map("partner_activities")
}

// Enums for Partner System
enum PartnerTier {
  BRONZE
  SILVER
  GOLD
}

enum PartnerStoreStatus {
  DEVELOPMENT
  TRANSFERRED
  ACTIVE
  CANCELLED
}

enum CommissionStatus {
  PENDING
  APPROVED
  PAID
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  REJECTED
}

enum PartnerActivityType {
  LOGIN
  STORE_CREATED
  STORE_TRANSFERRED
  STORE_ACTIVATED
  COMMISSION_EARNED
  PAYOUT_REQUESTED
  PROFILE_UPDATED
  PASSWORD_CHANGED
}
