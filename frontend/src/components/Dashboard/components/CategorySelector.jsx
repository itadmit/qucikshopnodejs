import React, { useState, useEffect } from 'react';
import { 
  ChevronDown, 
  ChevronRight, 
  Plus, 
  Search,
  Check,
  Folder,
  FolderOpen
} from 'lucide-react';

const CategorySelector = ({ 
  selectedCategories = [], 
  onCategoriesChange,
  placeholder = "בחר קטגוריות..."
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [expandedCategories, setExpandedCategories] = useState(new Set());
  const [showNewCategoryForm, setShowNewCategoryForm] = useState(false);
  const [newCategoryName, setNewCategoryName] = useState('');
  const [newCategoryParent, setNewCategoryParent] = useState('');

  // Mock categories data - in real app, this would come from API
  const [categories, setCategories] = useState([
    {
      id: 1,
      name: 'בגדים',
      parentId: null,
      children: [
        { id: 2, name: 'חולצות', parentId: 1, children: [] },
        { id: 3, name: 'מכנסיים', parentId: 1, children: [] },
        { id: 4, name: 'שמלות', parentId: 1, children: [] }
      ]
    },
    {
      id: 5,
      name: 'נעליים',
      parentId: null,
      children: [
        { id: 6, name: 'סניקרס', parentId: 5, children: [] },
        { id: 7, name: 'נעלי עקב', parentId: 5, children: [] }
      ]
    },
    {
      id: 8,
      name: 'אביזרים',
      parentId: null,
      children: [
        { id: 9, name: 'תיקים', parentId: 8, children: [] },
        { id: 10, name: 'תכשיטים', parentId: 8, children: [] }
      ]
    }
  ]);

  // Toggle category expansion
  const toggleExpanded = (categoryId) => {
    const newExpanded = new Set(expandedCategories);
    if (newExpanded.has(categoryId)) {
      newExpanded.delete(categoryId);
    } else {
      newExpanded.add(categoryId);
    }
    setExpandedCategories(newExpanded);
  };

  // Toggle category selection
  const toggleCategory = (categoryId) => {
    const newSelected = [...selectedCategories];
    const index = newSelected.indexOf(categoryId);
    
    if (index > -1) {
      newSelected.splice(index, 1);
    } else {
      newSelected.push(categoryId);
    }
    
    onCategoriesChange(newSelected);
  };

  // Add new category
  const handleAddCategory = () => {
    if (!newCategoryName.trim()) return;

    const newCategory = {
      id: Date.now(), // In real app, this would be generated by backend
      name: newCategoryName.trim(),
      parentId: newCategoryParent || null,
      children: []
    };

    if (newCategoryParent) {
      // Add as child to existing category
      const updateCategories = (cats) => {
        return cats.map(cat => {
          if (cat.id.toString() === newCategoryParent) {
            return { ...cat, children: [...cat.children, newCategory] };
          }
          if (cat.children.length > 0) {
            return { ...cat, children: updateCategories(cat.children) };
          }
          return cat;
        });
      };
      setCategories(updateCategories(categories));
    } else {
      // Add as root category
      setCategories([...categories, newCategory]);
    }

    setNewCategoryName('');
    setNewCategoryParent('');
    setShowNewCategoryForm(false);
  };

  // Filter categories based on search
  const filterCategories = (cats, term) => {
    if (!term) return cats;
    
    return cats.filter(cat => {
      const matchesName = cat.name.toLowerCase().includes(term.toLowerCase());
      const hasMatchingChildren = cat.children && filterCategories(cat.children, term).length > 0;
      return matchesName || hasMatchingChildren;
    }).map(cat => ({
      ...cat,
      children: cat.children ? filterCategories(cat.children, term) : []
    }));
  };

  // Render category tree
  const renderCategory = (category, level = 0) => {
    const isExpanded = expandedCategories.has(category.id);
    const isSelected = selectedCategories.includes(category.id);
    const hasChildren = category.children && category.children.length > 0;

    return (
      <div key={category.id} className="select-none">
        <div 
          className={`flex items-center py-1 px-2 hover:bg-gray-50 rounded cursor-pointer ${
            isSelected ? 'bg-blue-50' : ''
          }`}
          style={{ paddingRight: `${level * 20 + 8}px` }}
        >
          {hasChildren ? (
            <button
              onClick={(e) => {
                e.stopPropagation();
                toggleExpanded(category.id);
              }}
              className="p-1 hover:bg-gray-200 rounded mr-1"
            >
              {isExpanded ? (
                <ChevronDown className="w-4 h-4" />
              ) : (
                <ChevronRight className="w-4 h-4" />
              )}
            </button>
          ) : (
            <div className="w-6 h-6 mr-1" />
          )}
          


          <label 
            className="flex items-center flex-1 cursor-pointer"
            onClick={() => toggleCategory(category.id)}
          >
            <input
              type="checkbox"
              checked={isSelected}
              onChange={() => {}}
              className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500 ml-2"
            />
            <span className="mr-2 text-sm text-gray-700">{category.name}</span>
            {isSelected && <Check className="w-4 h-4 text-blue-600 mr-auto" />}
          </label>
        </div>

        {hasChildren && isExpanded && (
          <div>
            {category.children.map(child => renderCategory(child, level + 1))}
          </div>
        )}
      </div>
    );
  };

  // Get selected category names for display
  const getSelectedCategoryNames = () => {
    const findCategoryName = (cats, id) => {
      for (const cat of cats) {
        if (cat.id === id) return cat.name;
        if (cat.children) {
          const found = findCategoryName(cat.children, id);
          if (found) return found;
        }
      }
      return null;
    };

    return selectedCategories.map(id => findCategoryName(categories, id)).filter(Boolean);
  };

  const filteredCategories = filterCategories(categories, searchTerm);
  const selectedNames = getSelectedCategoryNames();

  return (
    <div className="relative">
      {/* Trigger Button */}
      <button
        type="button"
        onClick={() => setIsOpen(!isOpen)}
        className="w-full px-3 py-2 text-right bg-white border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
      >
        <div className="flex items-center justify-between">
          <span className="text-sm text-gray-700">
            {selectedNames.length > 0 
              ? selectedNames.length === 1 
                ? selectedNames[0]
                : `${selectedNames.length} קטגוריות נבחרו`
              : placeholder
            }
          </span>
          <ChevronDown className={`w-5 h-5 text-gray-400 transition-transform ${isOpen ? 'rotate-180' : ''}`} />
        </div>
      </button>

      {/* Dropdown */}
      {isOpen && (
        <div className="absolute z-50 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-lg max-h-80 overflow-hidden">
          {/* Search */}
          <div className="p-3 border-b border-gray-200">
            <div className="relative">
              <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
              <input
                type="text"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                placeholder="חפש קטגוריה..."
                className="w-full pr-10 pl-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>

          {/* Add New Category Button */}
          <div className="p-2 border-b border-gray-200">
            <button
              onClick={() => setShowNewCategoryForm(!showNewCategoryForm)}
              className="w-full flex items-center justify-center py-2 px-3 text-sm text-blue-600 hover:bg-blue-50 rounded-md"
            >
              <Plus className="w-4 h-4 ml-2" />
              הוסף קטגוריה חדשה
            </button>
          </div>

          {/* New Category Form */}
          {showNewCategoryForm && (
            <div className="p-3 border-b border-gray-200 bg-gray-50">
              <div className="space-y-2">
                <input
                  type="text"
                  value={newCategoryName}
                  onChange={(e) => setNewCategoryName(e.target.value)}
                  placeholder="שם הקטגוריה החדשה"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
                <select
                  value={newCategoryParent}
                  onChange={(e) => setNewCategoryParent(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="">קטגוריה ראשית</option>
                  {categories.map(cat => (
                    <option key={cat.id} value={cat.id}>{cat.name}</option>
                  ))}
                </select>
                <div className="flex gap-2">
                  <button
                    onClick={handleAddCategory}
                    className="flex-1 py-2 px-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 text-sm"
                  >
                    הוסף
                  </button>
                  <button
                    onClick={() => {
                      setShowNewCategoryForm(false);
                      setNewCategoryName('');
                      setNewCategoryParent('');
                    }}
                    className="flex-1 py-2 px-3 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400 text-sm"
                  >
                    ביטול
                  </button>
                </div>
              </div>
            </div>
          )}

          {/* Categories List */}
          <div className="max-h-60 overflow-y-auto">
            {filteredCategories.length > 0 ? (
              <div className="p-2">
                {filteredCategories.map(category => renderCategory(category))}
              </div>
            ) : (
              <div className="p-4 text-center text-gray-500 text-sm">
                {searchTerm ? 'לא נמצאו קטגוריות' : 'אין קטגוריות זמינות'}
              </div>
            )}
          </div>
        </div>
      )}

      {/* Click outside to close */}
      {isOpen && (
        <div 
          className="fixed inset-0 z-40" 
          onClick={() => setIsOpen(false)}
        />
      )}
    </div>
  );
};

export default CategorySelector;
